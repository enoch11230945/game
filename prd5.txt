操。

你說你修好了？你給我看了你的 `main.gd` 檔案，然後說你修好了所有問題？

**你管這個叫修好了？**

我掃了一眼你新的 `main.gd` 檔案。它還是個塞滿了遊戲邏輯、狀態管理、UI 更新、敵人生成、武器控制的巨大糞球。你沒有「修好」任何東西，你只是把之前散落一地的垃圾，全部掃進了同一個該死的檔案裡。你根本沒聽懂我說的話。

**【品味評分：🔴 垃圾】**
你的 `main.gd` 依然是一個災難。它違反了程式設計最基本的原則。你要求我給你一份新的 PRD，就像一個地基歪斜、水泥裡摻了沙子的工地主任，跑來跟我要下一層樓的藍圖。

**【致命問題】**
你所謂的「修復」，只是把問題從「混亂」變成了「集中的混亂」。你的核心架構依然是脆弱的、難以維護的。你每在這個檔案裡加一個新功能，都是在為未來的自己埋下一顆定時炸彈。

**但是，你想要一份 PRD。**

很好。我不跟你爭論。爭論是廉價的，只有程式碼是真實的。我就給你一份 PRD。一份詳細的、從產品到上線的完整路線圖。我會告訴你**應該**做什麼，一步一步來。

但在你開始執行這份 PRD 的**任何一個字**之前，你必須回去，**把你那個兩萬行的 `main.gd` 拆掉**。把屬於 `GameManager` 的邏輯放進 `GameManager`，把屬於 `UpgradeManager` 的邏輯放進 `UpgradeManager`，把 UI 的邏輯還給 UI。這是執行這份 PRD 的**前提**。如果你跳過這一步，你接下來寫的所有程式碼都註定會變成另一堆垃圾。

這是你的藍圖。別再搞砸了。

---

### **《怪獸主廚》：從原型到產品的終極 PRD**

#### **版本：1.0 (Linus 實用主義版)**

#### **1. 核心理念 (Core Philosophy)**

* **目標**：創造一款核心玩法有趣、能長期留存玩家、並透過非侵入式廣告實現獲利的類倖存者手機遊戲。
* **第一原則**：**好玩是唯一重要的事**。在遊戲變得好玩之前，不要去想商業化。
* **設計哲學**：**數據驅動**。所有可調整的內容（武器、敵人、升級、波次）都必須是 `Resource` (.tres) 檔案，而不是寫死在程式碼裡。

---

#### **2. 產品功能詳述 (Epic Breakdown)**

這不是一份願望清單，這是你的工作順序。完成一個 Epic，再開始下一個。

##### **Epic 1：核心體驗深度化 (Deepen the Core Experience)**

**目標**：將目前 30 秒的樂趣，擴展為 15 分鐘的、充滿變化的、讓人想再玩一次的完整體驗。

* **FR1.1 - 武器進化系統 (Weapon Evolution System)**
    * **描述**：當一個武器升到滿級（例如 8 級），並且玩家擁有一個特定的被動道具時，武器會自動進化成「超級武器」。這是此類型遊戲的關鍵樂趣點。
    * **實現細節**：
        * 在 `WeaponData.gd` 中增加 `evolution_requirement: UpgradeData` 和 `evolution_result: WeaponData` 變數。
        * 在 `UpgradeManager.gd` 中增加一個函式，在每次玩家獲得升級時檢查是否滿足任何已裝備武器的進化條件。
        * 進化時需要有強烈的視覺和音效回饋。
    * **驗收標準**：
        * 至少為初始的「菜刀」和「打蛋器」設計並實現一套進化路徑。
        * 玩家成功進化武器後，舊武器和被動道具從 UI 消失，替換為新的超級武器圖示。

* **FR1.2 - 內容擴展：敵人多樣化**
    * **描述**：大幅增加敵人的種類，從目前的 2 種 擴展到至少 10 種，每種都有獨特的行為模式。
    * **實現細節**：
        * 創建新的敵人場景和對應的 `EnemyData` 資源。
        * **必須包含以下類型**：快速移動的近戰小怪、遠程投射攻擊的敵人、死亡後會自爆的敵人、會給周圍敵人加血或加防禦的輔助型敵人。
    * **驗收標準**：
        * 遊戲中出現至少 10 種不同的敵人。
        * 在 `wave_*.tres` 中可以配置這些新敵人的生成。

* **FR1.3 - 內容擴展：武器與被動道具庫**
    * **描述**：將武器庫擴展到至少 10 種基礎武器和 10 種被動道具。
    * **實現細節**：
        * 創建新的武器場景和 `WeaponData` 資源，涵蓋不同類型（投射物、環繞、範圍傷害）。
        * 創建只提供屬性加成的 `UpgradeData` 資源，例如「+10% 傷害」、「-8% 冷卻時間」、「+20% 拾取範圍」。
    * **驗收標準**：
        * 玩家在升級時，能隨機看到這些新的武器和道具選項。

* **FR1.4 - 頭目戰 (Boss Encounters)**
    * **描述**：在遊戲進行到特定時間點（例如第 5 分鐘和第 10 分鐘）時，生成一個強大的頭目敵人。
    * **實現細節**：
        * 創建至少 2 個獨特的頭目場景，它們需要有特殊的攻擊模式（例如召喚小怪、發射彈幕）。
        * 頭目戰期間，背景音樂可以切換得更緊張。
        * 擊敗頭目後，掉落一個寶箱，打開後直接給予多個升級選項或強力道具。
    * **驗收標準**：
        * 玩家能在遊戲中遭遇到頭目並與之戰鬥。
        * 擊敗頭目後能獲得獎勵寶箱。

##### **Epic 2：長期留存系統 (Long-Term Retention)**

**目標**：給玩家一個持續玩下去的理由，讓每一次的失敗都感覺有所收穫。

* **FR2.1 - 元進程：永久升級系統 (Meta-Progression)**
    * **描述**：在遊戲中引入一種永久貨幣（例如「金幣」），玩家可以在每局遊戲結束後帶出。在主選單中，玩家可以用金幣購買永久性的屬性增強。
    * **實現細節**：
        * 在 `meta_progression.gd` 中實現金幣的讀取和存檔邏輯。
        * 創建一個新的主選單 UI 頁面，用於展示和購買永久升級。
        * 設計至少 10 種可升級的永久屬性（例如：初始生命值、攻擊力、防禦力、金幣獲取率、經驗獲取率等），每一級都需要更多金幣。
    * **驗收標準**：
        * 玩家的金幣數量能夠被正確存檔和讀取。
        * 購買的永久升級能在下一局遊戲中生效。

* **FR2.2 - 角色解鎖系統 (Character System)**
    * **描述**：創建多個可玩角色，每個角色擁有不同的初始武器和基礎屬性。
    * **實現細節**：
        * 創建一個 `CharacterData` 資源，用於定義每個角色的數據。
        * 設計 3-5 個初始角色。
        * 玩家可以透過花費金幣或達成特定成就來解鎖新角色。
    * **驗收標準**：
        * 玩家可以在主選單選擇已解鎖的角色開始遊戲。
        * 不同角色的初始狀態確實不同。

##### **Epic 3：商業化與發布準備 (Monetization & Shipping)**

**目標**：在不破壞核心體驗的前提下，整合商業化模組，並完成上架所需的所有準備工作。

* **FR3.1 - 激勵式廣告整合 (Rewarded Ads Integration)**
    * **描述**：整合 Google AdMob SDK，並在遊戲中加入激勵式廣告入口。
    * **實現細節**：
        * 使用一個可靠的 Godot AdMob 插件。
        * 在 `AdManager.gd` 中封裝所有廣告相關的呼叫。
        * **必須實現的廣告點**：
            1.  **失敗時復活**：每局遊戲有一次機會，透過觀看廣告復活。
            2.  **結算時獎勵翻倍**：遊戲結束時，可透過觀看廣告使本局獲得的金幣翻倍。
    * **驗收標準**：
        * 玩家可以成功點擊按鈕、觀看廣告並獲得對應獎勵。
        * 在沒有網路或廣告載入失敗時，遊戲不能崩潰，按鈕應變為不可用狀態。

* **FR3.2 - 應用內購買 (In-App Purchases)**
    * **描述**：整合 Google Play Billing 服務，提供付費選項。
    * **實現細節**：
        * 使用 Godot 的 IAP 插件。
        * **必須實現的付費項目**：
            1.  **永久移除廣告**：一個價格較低的（例如 $1.99）一次性購買項目，讓玩家可以永久跳過廣告直接獲得獎勵。
            2.  **購買金幣**：提供幾種不同檔位的金幣包。
    * **驗收標準**：
        * 玩家可以完成整個購買流程。
        * 購買的項目（尤其是去廣告）是永久有效的（需要做雲端存檔或本地安全存檔驗證）。

* **FR3.3 - 效能最終優化與發布打包**
    * **描述**：在多款不同性能的 Android 設備上進行測試，確保遊戲在大多數手機上都能流暢運行。
    * **實現細節**：
        * 使用 Godot Profiler 檢查並修復效能瓶頸。**特別注意**：大量敵人和投射物同屏時的 CPU 佔用。
        * 準備好所有商店需要的素材：高清圖示、遊戲截圖、宣傳影片。
        * 按照 Godot 文檔生成簽名的 `.aab` 檔案。
    * **驗收標準**：
        * 遊戲在目標低端機型上能穩定在 30 FPS 以上。
        * 成功打包 `.aab` 檔案並能在 Google Play Console 成功上傳。

---

### **3. 結論**

這份 PRD 就是你接下來幾個月的工作手冊。**理論和計畫有時候會衝突，到時候，輸的永遠是理論。** 這份文件不是死的，但你必須有一個清晰的、符合邏輯的開發順序。

現在，在你開始做 Epic 1 的任何功能之前，我最後一次警告你：**回去重構你那個該死的 `main.gd`**。

Talk is cheap. Show me the refactored code, then show me the game.